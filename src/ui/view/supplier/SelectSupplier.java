package ui.view.supplier;

import controller.supplier.SupplierController;
import database.connector.DBConnection;
import java.awt.Point;
import java.sql.SQLException;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import model.supplier.Supplier;

public class SelectSupplier extends javax.swing.JInternalFrame {

    //
    // <editor-fold defaultstate="collapsed" desc="Variables">

    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(SelectSupplier.class);

    private DefaultTableModel tableModel;

    private final JInternalFrame parent;

    // </editor-fold>
    //
    //
    // <editor-fold defaultstate="collapsed" desc="Netbeans Generated">

    /**
     * Creates new form selectSupplier
     *
     * @param parent
     */
    public SelectSupplier(JInternalFrame parent) {
        initComponents();
        this.parent = parent;
        this.setLocation(new Point(parent.getWidth() / 2 + parent.getX() - this.getWidth() / 2, parent.getHeight() / 2 + parent.getY() - this.getHeight() / 2));
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        tblSupplier = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        btnSelectSupplier = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblSupplier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supplier Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSupplier.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblSupplier.setRowHeight(30);
        tblSupplier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSupplierMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblSupplier);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSelectSupplier.setText("Select");
        btnSelectSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectSupplierActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectSupplier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSelectSupplier)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        close();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSelectSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectSupplierActionPerformed
        selectSupplier();
    }//GEN-LAST:event_btnSelectSupplierActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteSelected();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblSupplierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSupplierMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            selectSupplier();
        }
    }//GEN-LAST:event_tblSupplierMouseClicked

    public static void main(String args[]) {
        /*
         java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
         new selectSupplier().setVisible(true);
         }
         });
         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSelectSupplier;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblSupplier;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    //
    //
    // <editor-fold defaultstate="collapsed" desc="Functions">

    private void initTable() {
        tableModel = (DefaultTableModel) tblSupplier.getModel();
        updateTable();
    }

    private void selectSupplier() {
        if (tblSupplier.getSelectedRow() >= 0 && tblSupplier.getSelectedColumn() >= 0) {
            Supplier selectedSupplier = (Supplier) tableModel.getValueAt(tblSupplier.getSelectedRow(), tblSupplier.getSelectedColumn());
            ((SupplierInterface) parent).setSupplier(selectedSupplier);
            close();
        } else {
            util.Utilities.showMsgBox("Select a supplier to continue", "Supplier Selection", 0);
        }
    }

    private void close() {
        parent.setEnabled(true);
        this.dispose();
    }

    private void deleteSelected() {
        for (int c : tblSupplier.getSelectedRows()) {
            try {
                Supplier s = (Supplier) tableModel.getValueAt(c, tblSupplier.getSelectedColumn());
                SupplierController.deleteSuppler(s.getSupplerID());
            } catch (SQLException ex) {
                util.Utilities.ShowErrorMsg(this, "Supplier is refered in GRN!");
                logger.error(ex.getMessage());
            }
        }
        updateTable();
    }

    private void updateTable() {
        tableModel.setRowCount(0);
        try {
            for (Supplier s : SupplierController.getAllSuppliers()) {
                tableModel.addRow(new Supplier[]{s});
            }
            DBConnection.closeConnectionToDB();
        } catch (SQLException ex) {
            logger.error("Error: " + ex.getMessage());
        }
    }

    // </editor-fold>
    //
}
